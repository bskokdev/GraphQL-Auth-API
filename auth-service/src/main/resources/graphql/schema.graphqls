# Credentials provided by the user
input LoginCredentials {
    email: String!,
    password: String!
}

type JwtPayload {
    accessToken: String!,
    refreshToken: String!,
    expiresIn: Int!
    refreshTokenExpiresIn: Int!
    tokenType: String!
    idToken: String!
}

# In case the credential check fails
type ResponseError {
    message: String!,
    code: Int!
}

# returned to the client
type JwtResponse {
    payload: JwtPayload,
    error: ResponseError
}

# User metadata
type UserMetadata {
    id: ID!
    username: String!
    firstName: String
    lastName: String
    email: String!
    emailVerified: Boolean!
}

# returned to the client for user information query
type UserMetadataResponse {
    userMetadata: UserMetadata,
    error: ResponseError
}

type Query {
    me(accessToken: String!): UserMetadataResponse!
}

type Mutation {
    login(credentials: LoginCredentials): JwtResponse!
    logout(idToken: String!): Boolean!
    refresh(refreshToken: String!): JwtResponse!
    revoke(token: String!): Boolean!
}